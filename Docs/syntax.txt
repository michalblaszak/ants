CLASS Object {
  PROPERTIES
    INTEGER id

  PUBLIC METHODS
    CONSTRUCTOR() {
      id = UOID()  // Unique Object ID
    }

    CONSTRUCTOR(INTEGER id) {
      this.id = id
    }
}

CLASS Ant OF Object {
  PROPERTIES
    FLOAT x y z
    FLOAT vx vy vz  // Direction vector, must be kept unit length

  PRIVATE METHODS
    INIT() {
      x = y = z = 0
      vx = 1 vy = 0 vz = 0
    }

  PUBLIC METHODS
    CONSTRUCTOR() {
      INIT
    }

    CONSTRUCTOR(INTEGER id) : Object(id) {
      INIT
    }

    FD(FLOAT d) {
      x += d*vx
      y += d*vy
      z += d*vz
    }

    // Rotates around X axis
    YAW(FLOAT x) {
      FLOAT s = SIN(x)
      FLOAT c = COS(x)
      // FLOAT vx1 = vx
      FLOAT vy1 = c*vy - s*vz
      FLOAT vz1 = s*vy + c*vz
      vy = vy1
      vz = vz1
    }

    // Rotates around Y axis
    PITCH(FLOAT y) {
      FLOAT s = SIN(y)
      FLOAT c = COS(y)
      FLOAT vx1 = c*vx + s*vz
      // FLOAT vy1 = vy
      FLOAT vz1 = -s*vx + c*vz
      vx = vx1
      vz = vz1
    }

    // Rotates around z axis
    ROLL(FLOAT z) {
      FLOAT s = SIN(z)
      FLOAT c = COS(z)
      FLOAT vx1 = c*vx - s*vy
      FLOAT vy1 = s*vx + c*vy
      // FLOAT vz1 = vz
      vx = vx1
      vy = vy1
    }
}

Ant A = Ant
array [int] of Ant B = [1:Ant, 2:Ant, 3:Ant]
array [int] of Ant C = [1..10 : Ant]
array [int] of Ant D = [x in 1..10 : Ant(id = x)]

array [int] of int a
a = [[1]=10, [2]=20, [3]=30]
a[?] -> int
a[?][?] -> wrong type (int is not indexable)

sygnatura typu wyraenia
a[1]=10
array int-int = int

x = a[1]      a int-int * [int] -> int

array [int, int] of int b
b = [[1,1]=10, [1,2]=20, [2,1]=30, [2,2]=40]
b[?,?] -> int
b[?] -> wrong type (missing index)


array [int,int] of array[int] of float z
[[1,1]=[[1]=0.1, [2]=0.2, [3]=0.3],
 [1,2]=[[1]=1.1, [2]=1.2, [3]=1.3],
 [2,1]=[[1]=2.1, [2]=2.2, [3]=2.3],
 [2,2]=[[1]=3.1, [2]=3.2, [3]=3.3]
]

z[?] -> wrong type (missing index)
z[?,?] -> array [int] of float
z[?,?][?] -> float

z[1,1] = [[1]=0.1, [2]=0.2]
z[1,1][1] = 0.3

array [int,int] of array[int,int] of float z
z[1,1] = [[1,1]=0.1, [1,2]=0.2]
z[1,1][1,2] = 0.3

Square(Ant obj, FLOAT x) {
  FOREACH 1..4 { obj.FD(x) obj.LT(90) }
}

FOREACH ant in D {
  Square(ant, 10)
}

D->(obj=?){Square(obj, 10)}

D->(obj=?, x=10){ FOREACH 1..4 { obj.FD(x) obj.LT(90) } }

Wyrazenia iteracyjne:
==================

i in 10 - powtórzyc 1 raz ze zmienna zawierajaca wartosc 10
1..10 - licznik od 1 do 10
i in 1..10 - licznik ze zmienna od 1..10

i in 1..10, j in 1..10 if i*j==10 - dwa liczniki z warunkiem

Procedury nie musza miec deklaracji zwracanego typu
Wywolanie procedury bez parametrów nie wymaga podania nawiasów

Ptle
=======

int x

x=100

FOR i IN 1..10, j IN 1..20, s IN Names WHEN i*j==10
{
  int x
  x=(i+j)*:x
  a[i,j][s] = x
}

Funkcje
===========

int x

x=1

function beta(int x) of int {
  int y
  y=x*2
  return y
}

function alfa(int x) of int {
  int y

  y=x+:x

  return beta(y)
}

int y

y=alfa(x)

Bytecode
========

0 DATA i   ; x
1 DATA i   ; y

PUTADDR 0  ; x
PUTINT 1   ; 1
MOVE       ; x=1
                                     stack    callstack
PUTADDR 1  ; y                       y
PUTADDR 0  ; x                       y,x
CALL alfa                                     alfa
MOVE       ; y=alfa(x)

END

beta:
0 SDATA i     ; x - allocate x on callstack and store it's address here: x,y,x
1 SDATA i     ; y - allocate y on callstack and store it's address here; x,y,x,y

PUTSADDR 0    ; local x (attribute)
MOVE
PUTSADDR 1    ; local y
PUTSADDR 0    ; local x
PUTINT   2
MUL
MOVE
PUTVAL 1      ; put value of y to stack
RETURN

alfa:
0 SDATA i     ; x                                          x
1 SDATA i     ; y                                          x,y

PUTSADDR 0    ; local x (attribute)
MOVE
PUTSADDR 1    ; local y
PUTSADDR 0    ; local x
PUTADDR 0     ; global x
ADD
MOVE
PUTADD 1
CALL beta
RETURN



